favorite_places_sp = favorite_places_df
coordinates(favorite_places_sp) = ~lon+lat
proj4string(favorite_places_sp) = CRS("+init=epsg:4326")
plot(favorite_places_sp)
pointLabel(x = favorite_places_sp@coords, labels = favorite_places_sp$name)
# 3. Map and label your places using plot() and pointLabel()
spatial_data_directory = file.path(here::here(), "Homework Assignments","HW4 files")
getwd()
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = hw4_directory, layer = "putah_creek")
readOGR()
library(rgdal)
library(sp)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)  # Reads shapefiles
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(maptools)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)  # Reads shapefiles
install.packages('e1071', dependencies=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)  # Reads shapefiles
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(maptools)
library(rgdal)
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = hw4_directory, layer = "putah_creek")
putah_cr = readOGR(dsn = hw4_directory, package = "rgdal", layer = "putah_creek")
package(rgdal)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(maptools)
library(sp)
library(rgdal)
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = hw4_directory, layer = "putah_creek")
library(raster)
library(maptools)
library(sp)
library(rgdal)
install.packages("rgdal")
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(maptools)
library(sp)
library(rgdal)
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = hw4_directory, package = "rgdal", layer = "putah_creek")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = hw4_directory, layer = "putah_creek")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
getwd()
# 1. Set the directory for your spatial data directory:
spatial_data_directory = file.path(here::here(), "HW4 files")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
# 1. Set the directory for your spatial data directory:
spatial_data_directory = "C:/Users/enmia/OneDrive/Documents/HW4 files"
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
crs(putah_cr)
berryessa = readOGR(dsn = spatial_data_directory,
layer ="berryessa")
davis = readOGR(dsn = spatial_data_directory,
layer ="davis")
california_boundary = readOGR(dsn = spatial_data_directory, layer = "california")
# 3. Read in the raster of California average annual rainfall
ca_rainfall = raster(x = file.path(spatial_data_directory, "ca_rainfall.grd"))
# 1. Set the directory for your spatial data directory:
spatial_data_directory = file.path(here::here(), "HW4 files")
#"C:/Users/enmia/OneDrive/Documents/HW4 files"
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
crs(putah_cr)
berryessa = readOGR(dsn = spatial_data_directory,
layer ="berryessa")
davis = readOGR(dsn = spatial_data_directory,
layer ="davis")
california_boundary = readOGR(dsn = spatial_data_directory, layer = "california")
# 3. Read in the raster of California average annual rainfall
ca_rainfall = raster(x = file.path(spatial_data_directory, "ca_rainfall.grd"))
crs(putah_cr)
crs(davis)
crs(berryessa)
crs(california_boundary)
crs(ca_rainfall)
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
plot(california_boundary, add=T)
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
plot(california_boundary, add=T)
?lty
lty
lty()
col()
col()
?col()
?lty()
# 1. Plot the raster file first, including a map title.
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
plot(california_boundary, add=T)
plot(putah_cr, col = "pink", lwd = 2, add = T, main = "Features near Putah Creek")
plot(berryessa, col = "red", add = T)
plot(davis, col = "orchid", add = T)
# 2. Then, add all of the line and polygon data that you read in the code chunk above.
plot(davis, col = "orchid")
dim(putah_cr)
# 1. Plot the raster file first, including a map title.
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
# 2. Then, add all of the line and polygon data that you read in the code chunk above.
plot(california_boundary, add=T)
plot(putah_cr, col = "pink", lwd = 2, add = T, main = "Features near Putah Creek")
plot(berryessa, col = "red", add = T)
plot(davis, col = "orchid", add = T)
# 1. Plot the raster file first, including a map title.
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
# 2. Then, add all of the line and polygon data that you read in the code chunk above.
plot(california_boundary, add=T)
plot(putah_cr, col = "pink", lwd = 2, add = T, main = "Features near Putah Creek")
plot(berryessa, col = "red", add = T)
plot(davis, col = "orchid", add = T)
# 1. Plot the raster file first, including a map title.
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
# 2. Then, add all of the line and polygon data that you read in the code chunk above.
plot(california_boundary, add=T)
plot(putah_cr, col = "cyan", lwd = 2, add = T, main = "Features near Putah Creek")
plot(berryessa, col = "blue", add = T)
plot(davis, col = "red", add = T)
# First, un-comment this line to check out the function help
?getData
?col
# First, un-comment this line to check out the function help
?getData
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "CHN")         # Your country code goes here! This is Bangladesh, for example.
altitude = getData(name = "alt",
country = "CHN")
library(raster)
# First, un-comment this line to check out the function help
?getData
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "CHN")         # Your country code goes here! This is Bangladesh, for example.
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
alt
library(raster)
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "CHN")         # Your country code goes here! This is Bangladesh, for example.
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "BGD")         # Your country code goes here! This is Bangladesh, for example.
library(raster)
# First, un-comment this line to check out the function help
?getData
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "BGD")         # Your country code goes here! This is Bangladesh, for example.
##If you pick a country with discontinuous pieces (like the United States), it will give you the pieces as items in a list
## If so, use the 2 lines of code below:
altitude_piece1 = altitude[[1]]  # Items in a list are accessed with [[]] double brackets
altitude = altitude_piece1   #for the rest of the code, just set "altitude" to be the first (or 2nd, or 3rd or whichever!) element in the list of raster pieces
plot(altitude)  #View your altitude data on a map
altitude  # View the raster data info summary
library(raster)
# First, un-comment this line to check out the function help
?getData
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "USA")         # Your country code goes here! This is Bangladesh, for example.
##If you pick a country with discontinuous pieces (like the United States), it will give you the pieces as items in a list
## If so, use the 2 lines of code below:
altitude_piece1 = altitude[[1]]  # Items in a list are accessed with [[]] double brackets
altitude = altitude_piece1   #for the rest of the code, just set "altitude" to be the first (or 2nd, or 3rd or whichever!) element in the list of raster pieces
plot(altitude)  #View your altitude data on a map
altitude  # View the raster data info summary
nrow(altitude)
ncol(altitude)
ncell(altitude)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(maptools)
library(sp)
library(rgdal)
# 1. Make a data frame with 3 columns: the name of your places, the latitude and the longitude
favorite_places = c("In n Out", "John Mise Park", "MLK Jr Library")
favorite_places_lat = c(38.5410, 37.3169, 37.3355)
favorite_places_lon = c(121.7372, 121.9900, 121.8850)
favorite_places_df = data.frame(name = favorite_places, lat = favorite_places_lat, lon = favorite_places_lon)
favorite_places_df
# 2. Make a copy of your data frame, turn it into a spatial object, and assign it the WGS84 coordinate reference system
favorite_places_sp = favorite_places_df
coordinates(favorite_places_sp) = ~lon+lat
proj4string(favorite_places_sp) = CRS("+init=epsg:4326")
plot(favorite_places_sp)
pointLabel(x = favorite_places_sp@coords, labels = favorite_places_sp$name)
# 3. Map and label your places using plot() and pointLabel()
# 1. Set the directory for your spatial data directory:
spatial_data_directory = file.path(here::here(), "HW4 files")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
crs(putah_cr)
berryessa = readOGR(dsn = spatial_data_directory,
layer ="berryessa")
davis = readOGR(dsn = spatial_data_directory,
layer ="davis")
california_boundary = readOGR(dsn = spatial_data_directory, layer = "california")
# 3. Read in the raster of California average annual rainfall
ca_rainfall = raster(x = file.path(spatial_data_directory, "ca_rainfall.grd"))
# 1. Plot the raster file first, including a map title.
plot(ca_rainfall, main = "Average California Rainfall (mm per year)")
# 2. Then, add all of the line and polygon data that you read in the code chunk above.
plot(california_boundary, add=T)
plot(putah_cr, col = "cyan", lwd = 2, add = T, main = "Features near Putah Creek")
plot(berryessa, col = "blue", add = T)
plot(davis, col = "red", add = T)
library(raster)
# First, un-comment this line to check out the function help
?getData
# Then, un-comment this line and use this list to find the 3-digit code of your country
View( getData("ISO3") )
altitude = getData(name = "alt", # Altitude (land surface elevation) dataset
country = "USA")         # Your country code goes here! This is Bangladesh, for example.
##If you pick a country with discontinuous pieces (like the United States), it will give you the pieces as items in a list
## If so, use the 2 lines of code below:
altitude_piece1 = altitude[[1]]  # Items in a list are accessed with [[]] double brackets
altitude = altitude_piece1   #for the rest of the code, just set "altitude" to be the first (or 2nd, or 3rd or whichever!) element in the list of raster pieces
plot(altitude)  #View your altitude data on a map
altitude  # View the raster data info summary
getwd()
dsn
?dsn()
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = path.expand(spatial_data_directory), layer = "putah_creek")
getwd()
# 1. Set the directory for your spatial data directory:
spatial_data_directory = setwd("C:/Users/enmia/OneDrive/Documents/HW4 files")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = path.expand(spatial_data_directory), layer = "putah_creek")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
# 1. Set the directory for your spatial data directory:
spatial_data_directory = file.path(here::here(), "HW4 files")
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = path.expand(spatial_data_directory), layer = "putah_creek")
crs(putah_cr)
berryessa = readOGR(dsn = path.expand(spatial_data_directory),
layer ="berryessa")
davis = readOGR(dsn = path.expand(spatial_data_directory),
layer ="davis")
california_boundary = readOGR(dsn = path.expand(spatial_data_directory), layer = "california")
# 3. Read in the raster of California average annual rainfall
ca_rainfall = raster(x = file.path(spatial_data_directory, "ca_rainfall.grd"))
# 2. Read in shapefiles for Putah Creek, Lake Berryessa, Davis city limits, and the boundary of California
putah_cr = readOGR(dsn = spatial_data_directory, layer = "putah_creek")
crs(putah_cr)
berryessa = readOGR(dsn = spatial_data_directory,
layer ="berryessa")
davis = readOGR(dsn = spatial_data_directory,
layer ="davis")
california_boundary = readOGR(dsn = spatial_data_directory, layer = "california")
# 3. Read in the raster of California average annual rainfall
ca_rainfall = raster(x = file.path(spatial_data_directory, "ca_rainfall.grd"))
# 1. Set the directory for your spatial data directory:
spatial_data_directory = file.path(here::here(), "HW4 files")
list.files(spatial_data_directory)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, results = FALSE)
library(raster)
library(rgdal)
NHD_files = file.path(here::here(),
"Lessons",
"Lesson 10_Maps",
"NHD_H_1802_HU4_Shape",
"Shape")
flowline = readOGR(dsn = NHD_files,
layer = "NHDFlowline")
NHD_files
library("tidyverse")
fish <- readr::read_csv("data/Gaeta_etal_CLC_data.csv")
glimpse(fish)
str(fish)
summary(fish)
names(fish)
names(fish)
names(fish)
select(lakeid)
names(fish)
select(fish$lakeid)
names(fish)
select(fish$fish_id)
names(fish)
select(fish$annnumber)
?select()
names(fish)
select(fish, fish$lakeid)
?select()
names(fish)
select(fish, "lakeid")
names(fish)
select("lakeid")
names(fish)
select(fish, "lakeid", "annnumber")
names(fish)
select(fish, "lakeid", "annnumber", "length")
select(fish, "lakeid", "scalelength")
library("tidyverse")
setwd("C:/Users/enmia/OneDrive/Desktop/GitHub/BIS15W2021_echang/lab4")
knitr::opts_chunk$set(echo = TRUE)
homerange <- read.csv(url("http://datadryad.org/resource/doi:10.5061/dryad.q5j65/1"))
dim(homerange)
dim(homerange)
colnames(homerange)
classesToAM(homerange)
dim(homerange)
colnames(homerange)
class(homerange$X..DOCTYPE.html.)
summary(homerange)
homerange <- readr::read_csv("Tamburelloetal_HomeRangeDatabase.csv")
setwd("C:/Users/enmia/OneDrive/Desktop/GitHub/BIS15W2021_echang/lab4/data")
setwd("C:/Users/enmia/OneDrive/Desktop/GitHub/BIS15W2021_echang/lab4/data")
homerange <- readr::read_csv("Tamburelloetal_HomeRangeDatabase.csv")
dim(homerange)
colnames(homerange)
class(homerange$X..DOCTYPE.html.)
summary(homerange)
classesToAM(homerange)
dim(homerange)
colnames(homerange)
str(homerange)
summary(homerange)
as.factor(homerange$taxon)
as.factor(homerange$order)
levels(taxon)
levels(homerange$taxon)
levels(homerange$order)
class(homerange$taxon)
homerange$taxon <- as.factor(homerange$taxon)
homerange$order <- as.factor(homerange$order)
levels(homerange$taxon)
levels(homerange$order)
levels(homerange$taxon)
levels(homerange$order)
names(homerange)
new_df <- data.frame(select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
?select()
names(homerange)
new_df <- select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species"))
names(homerange)
new_df <- select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species")
new_df
new_df <- data.frame(select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species"))
new_df
new_df <- select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species")
new_df <- data.frame(new_df)
new_df
View(new_df)
new_df <- select(homerange, taxon & common.name & class & order & family & genus & species)
names(homerange)
attach(homerange)
new_df <- select(homerange, taxon & common.name & class & order & family & genus & species)
new_df <- select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species")
newer_df <- data.frame(new_df)
View(newer_df)
select(homerange, "taxon" & "common.name" & "class" & "order" & "family" & "genus" & "species")
homerange$taxon
select(homerange, taxon)
select(homerange, taxon & common.name)
select(homerange, "taxon" & "common.name")
select(homerange, taxon, common.name)
select(homerange, "taxon", "common.name")
names(homerange)
attach(homerange)
new_df <- select(homerange, "taxon", "common.name", "class", "order", "family", "genus", "species")
new_df <- data.frame(new_df)
new_df
table(taxon)
table(species)
str(species)
glimpse(species)
table(species)
View(homerange)
table(trophic.guild)
carnivore_df <- data.frame(filter(homerange, trophic.guild == "carnivore"))
View(carnivore_df)
herbivore_df <- data.frame(filter(homerange, trophic.guild == "herbivore"))
mean(carnivore_df$mean.hra.m2, na.rm = T)
mean(herbivore_df$mean.hra.m2, na.rm = T)
names(homerange)
deer <- data.frame(select(homerange, "mean.mass.g" & "log10.mass"))
deer <- data.frame(select(homerange, "mean.mass.g", "log10.mass"))
names(homerange)
deer <- data.frame(select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species"))
deer <- data.frame(filter(select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species"), family == "cervidae"))
View(deer)
order(deer, -log10.mass)
order(-log10.mass)
order(deer$-log10.mass)
order(-deer$log10.mass)
order(deer$log10.mass)
order(deer, deer$log10.mass)
order(deer$log10.mass)
deer
deer$log10.mass
order(deer$log10.mass)
desc(deer$log10.mass)
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer
largest_deer <- filter(deer, log10.mass == "5.48746")
names(homerange)
deer <- data.frame(filter(select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species"), family == "cervidae"))
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == "5.48746")
largest_deer
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer <- filter(deer, log10.mass != 5.48746)
largest_deer
deer <- data.frame(filter(select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species"), family == "cervidae"))
largest_deer <- filter(deer, deer$log10.mass == 5.48746)
largest_deer <- filter(deer, deer$log10.mass != 5.48746)
largest_deer
View(deer)
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 4.38112)
largest_deer <- filter(deer, log10.mass == 4.38112 )
largest_deer <- filter(deer, log10.mass == "4.38112 ")
largest_deer <- filter(deer, log10.mass == "4.38112")
sort(deer$log10.mass, decreasing = T)
class(deer$log10.mass)
largest_deer
largest_deer <- filter(deer, log10.mass == 5.48746)
homerange
names(homerange)
View(homerange)
snake <- filter(homerange, taxon == "snakes")
snake
largest_deer <- filter(homerange, family == "cervidae" & log10.mass == 5.48746)
largest_deer <- filter(homerange, family == "cervidae")
largest_deer <- filter(homerange, family == "cervidae" & "log10.mass" == 5.48746)
largest_deer <- filter(homerange, "family" == "cervidae" & "log10.mass" == 5.48746)
largest_deer <- filter(homerange, "family" == "cervidae" & "log10.mass" == "5.48746"")
largest_deer <- filter(homerange, family == "cervidae" & log10.mass == 5.48746)
class(homerange$family)
largest_deer <- filter(homerange, family == "cervidae" & log10.mass == 5.48746)
largest_deer
largest_deer <- filter(homerange, family == "cervidae", log10.mass == 5.48746)
largest_deer
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer
order(snake$mean.hra.m2)
sort(snake$mean.hra.m2, increasing = T)
sort(snake$mean.hra.m2, decreasing = F)
smallest_snake <- filter(snake, mean.hra.m2 == 200.00)
View(snake)
smallest_snake <- filter(snake, mean.hra.m2 == 200.00)
smallest_snake
largest_deer <- filter(homerange, family == "cervidae" & log10.mass == 5.48746)
largest_deer
largest_deer <- filter(deer, log10.mass == 5.48746)
deer <- (filter(select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species"), family == "cervidae"))
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer
deer <- filter(homerange, family == "cervidae")
deer
deer <- select(homerange, "mean.mass.g", "log10.mass", "family", "genus", "species")
deer
deer
deer <- select(deer, "mean.mass.g", "log10.mass", "family", "genus", "species")
deer
names(homerange)
deer <- filter(homerange, family == "cervidae")
deer <- select(deer, "mean.mass.g", "log10.mass", "family", "genus", "species")
deer
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer
#The common name is the Moose
deer
sort(deer$log10.mass, decreasing = T)
largest_deer <- filter(deer, log10.mass == 5.48746)
largest_deer
log10.mass
deer$log10.mass
largest_deer <- filter(deer, log10.mass == 5.48746 )
largest_deer
class(log10.mass)
largest_deer <- filter(deer, log10.mass < 5.48746 )
largest_deer
largest_deer <- filter(deer, log10.mass <= 5.48746 )
largest_deer <- filter(deer, log10.mass <= 5.48746 )
largest_deer <- filter(deer, log10.mass < 5.48746 )
largest_deer <- filter(deer, log10.mass >= 5.48746 )
largest_deer
largest_deer <- filter(homerange, family == "cervidae" log10.mass >= 5.48746 )
largest_deer <- filter(homerange, family == "cervidae" & log10.mass >= 5.48746 )
largest_deer
